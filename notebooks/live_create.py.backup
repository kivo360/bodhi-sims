from __future__ import annotations
import abc
from atexit import register
from py_svm import dataclass
from py_svm.synk.clock import Clock
import networkx as nx
import pyarrow as pa
import pandas as pd
from xxhash import xxh32, xxh64
import xxhash as xxh
from devtools import debug
from datetime import datetime
import uuid
from collections import OrderedDict, defaultdict
import duckdb
from abc import ABC

# mypy
from typing import Any, Dict, Iterator, List, Type, Union, cast
from py_svm.typings import Address
from py_svm.synk.abc import DatabaseAPI
import ibis
from pathlib import Path
from pydantic import BaseSettings, Extra, validator
from py_svm.synk.backends import sql as sqlq
from pydantic import BaseConfig as PyBaseConfig


DuckDBConn = duckdb.DuckDBPyConnection


class DuckSettings(BaseSettings):
    duckdb_path: Path = "./data/duckdb.db"

    @validator("duckdb_path")
    def create_path(cls, v) -> Path:
        v = cast(Path, v)
        v.parent.mkdir(parents=True, exist_ok=True)
        v.touch(exist_ok=True)
        return v

    class Config:
        env_file = ".env"


class BaseDB(DatabaseAPI, ABC):
    """
    This is an abstract key/value lookup with all :class:`bytes` values,
    with some convenience methods for databases. As much as possible,
    you can use a DB as if it were a :class:`dict`.
    Notable exceptions are that you cannot iterate through all values or get the length.
    (Unless a subclass explicitly enables it).
    All subclasses must implement these methods:
    __init__, __getitem__, __setitem__, __delitem__
    Subclasses may optionally implement an _exists method
    that is type-checked for key and value.
    """

    @abc.abstractmethod
    def run_query(self, query: str) -> pa.Table:
        ...

    def set(self, key: bytes, value: bytes) -> None:
        self[key] = value

    def exists(self, key: bytes) -> bool:
        return self.__contains__(key)

    def __contains__(self, key: bytes) -> bool:  # type: ignore # Breaks LSP
        if hasattr(self, "_exists"):
            # Classes which inherit this class would have `_exists` attr
            return self._exists(key)  # type: ignore
        else:
            return super().__contains__(key)

    def delete(self, key: bytes) -> None:
        try:
            del self[key]
        except KeyError:
            pass

    def __iter__(self) -> Iterator[bytes]:
        raise NotImplementedError("By default, DB classes cannot be iterated.")

    def __len__(self) -> int:
        raise NotImplementedError(
            "By default, DB classes cannot return the total number of keys."
        )


class StateDB(DatabaseAPI, ABC):
    def __init__(self, db: BaseDB, _address: Address) -> None:
        super().__init__()
        self._db = db
        self._episode: str | None = None
        self._address: str | None = None
        self.reset()

    def reset(self) -> None:
        for query in self.init_queries:
            self._db.run_query(query)

    # def _set_value(self, key: str, value: Any) -> None:
    #     self._db.run_query()

    @abc.abstractproperty
    def init_queries(self) -> List[str]:
        return []

    def _set_episode(self, episode: str) -> None:
        self._episode = episode

    def _set_address(self, _address: str) -> None:
        self._address = _address

    def _run_presave_hook(self) -> None:
        self._set_episode("2b10b5eb679f4fb08a5bd317ef692988")


class StorageDB(StateDB):
    def __init__(self, db: BaseDB) -> None:
        super().__init__(db)

    @property
    def init_queries(self) -> List[str]:
        return [sqlq.CREATE_STORAGE]


class AccountDB(StateDB):
    def __init__(self, db: BaseDB) -> None:
        super().__init__(db)

    @property
    def init_queries(self) -> List[str]:
        return [sqlq.CREATE_STORAGE]

    # def set_value(self, key: bytes, value: bytes) -> None:
    #     self.db.


class DuckDB(BaseDB):
    def __init__(self, settings: DuckSettings) -> None:
        super().__init__()
        self.conn: DuckDBConn = duckdb.connect(settings.duckdb_path)

    def run_query(self, query: str) -> pa.Table:
        return self.conn.execute(query).arrow()

    def __getitem__(self, key: bytes) -> bytes:
        return self.conn.get_value(key)

    def __setitem__(self, slot: bytes, value: bytes) -> None:
        self.conn.set_value(slot, value)

    def __delitem__(self, key: bytes) -> None:
        self.conn.remove_value(key)

    def __iter__(self) -> Iterator[bytes]:
        return self.conn.iter_values()

    def __len__(self) -> int:
        return self.conn.count_values()

    def _exists(self, key: bytes) -> bool:
        return self.conn.exists(key)

    def _locate_storage(self, _address: Address, _episode: str) -> None:
        """Figure out how to set the address and episode."""
        self._address = _address
        self._episode = _episode


# class AccountStorageDB(BaseDB):
#     """
#     This is a simple key/value lookup with all :class:`bytes` values,
#     with some convenience methods for databases. As much as possible,
#     you can use a DB as if it were a :class:`dict`.
#     Notable exceptions are that you cannot iterate through all values or get the length.
#     (Unless a subclass explicitly enables it).
#     All subclasses must implement these methods:
#     __init__, __getitem__, __setitem__, __delitem__
#     Subclasses may optionally implement an _exists method
#     that is type-checked for key and value.
#     """

#     def __init__(self, db: DatabaseAPI) -> None:
#         self.db = duckdb.connect()

#     def __getitem__(self, key: bytes) -> bytes:
#         return self.db[key]

#     def __setitem__(self, key: bytes, value: bytes) -> None:
#         self.db[key] = value

#     def __delitem__(self, key: bytes) -> None:
#         del self.db[key]

#     def __iter__(self) -> Iterator[bytes]:
#         return iter(self.db)

#     def __len__(self) -> int:
#         return len(self.db)

#     def _exists(self, key: bytes) -> bool:
#         return key in self.db


@dataclass
class Account:
    address: Address
    balance: float
    nonce: int

    class Config:
        arbitrary_types_allowed = True


class FederatedStorage:
    """A class to store the state of the network and add to the history."""

    def __init__(self):
        self.graph = nx.DiGraph()
        self.state = pd.DataFrame(
            columns=["address", "balance", "timestamp"],
        )
        self.clock = Clock()
        # print(self.state)

    def add_account(self, account: Account):
        self.graph.add_node(account.address)
        self.save_history(account)

    def save_history(self, account: Account):
        self.state = pd.concat(
            [
                self.state,
                pd.DataFrame(
                    {
                        "address": [account.address],
                        "balance": [account.balance],
                        "timestamp": [self.clock.step],
                    }
                ),
            ]
        )

    def get_account(self, address: str):
        self.graph.nodes[address]
        latest_state = self.state.iloc[-1]
        return {
            "address": address,
            "balance": float(latest_state["balance"]),
            "timestamp": latest_state["timestamp"],
        }


# def update_account_state(account: Account, timestamp: int) -> Account:
#     return Account(address, balance)


def main():
    import pandas as pd
    import pyarrow as pa
    import sys
    from py_svm.synk.backends import sql
    from loguru import logger
    from mimesis.enums import Gender
    from mimesis.locales import Locale
    from mimesis.schema import Field, Schema
    import time

    logger.remove()
    logger.add(
        sys.stderr,
        format="<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> | <cyan>{file.path}:{line}</cyan> - <level>{message}</level>",
        enqueue=True,
    )
    # logger.add(
    #     sys.stderr,
    #     format="<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> | <cyan>{file.path}:{line}</cyan> - <level>{message}</level>",
    #     level="INFO",
    #     enqueue=True,
    # )

    con = duckdb.connect()
    con.execute(sql.CREATE_ACCOUNT)
    con.execute(sql.CREATE_STORAGE)

    _ = Field(locale=Locale.EN)
    schema = Schema(
        schema=lambda: {
            # "pk": _("increment"),
            "episode": _("token_hex"),
            "address": _("ethereum_address"),
            # "name": _("text.word"),
            # username(mask='l_l_d', drange=(1900, 2021))
            "slot": _(
                "choice",
                items=[
                    "bloomberg",
                    "withdrawal",
                    "deck",
                    "sie",
                    "combinations",
                    "bird",
                    "ghost",
                    "cameron",
                    "keys",
                    "lucy",
                ],
            ),
            "value": _(
                "choice", items=[_("text.word"), _("integer_number"), _("float_number")]
            ),
            "timestamp": _("increment"),
            "value_choice": {
                "word": _("text.word"),
                "address": _("ethereum_address"),
                "ints": _("integer_number"),
                "float": _("float_number"),
                "bool": _("boolean"),
            },
        }
    )
    # print("hello")
    _episode = uuid.uuid4().hex
    _address = f"0x{uuid.uuid4().hex[10:]}"
    _ts = 0
    vals = dict(episode=_episode, address=_address, balance=1001.0, timestamp=_ts)
    con.execute(
        sql.INSERT_ACCOUNT_STATE,
        [_episode, _address, 1000000.1, 0],
    )
    resp = con.execute(
        sql.GET_FIRST_ACCOUNT.format(**vals),
    ).fetchone()
    print(resp)
    con.execute("select * from accounts")
    logger.debug(con.df())

    # generated = schema.create(iterations=10)

    # debug(generated)
    # logger.debug(rcf)
    # print(rcf["slot"].to_list())

    # for obj in schema.loop():
    #     slot = obj.get("slot")

    #     logger.info(obj)
    #     time.sleep(0.1)

    # con.execute(
    #     """create table accounts (id int64, episode string, address string, balance DOUBLE, timestamp int64)"""
    # )
    # con.execute(
    #     "insert into accounts (id, episode, address, balance, timestamp) values (1, '233458601e609ab1c330d563326c07fd3dcb8edc', '0x3788f04a76f3c3e6ac5bae908c425ca913111494', 26, 51);"
    # )
    # # con.execute(
    # #     "CREATE TABLE accounts (id INT64, episode STRING, address STRING, balance FLOAT64, timestamp INT64)"
    # # )
    # con.execute("select * from accounts")
    # print(con.df())

    # rel = duckdb.from_arrow(con.arrow())
    # print(
    #     con.values([uuid.uuid4().hex, uuid.uuid4().hex, 100.0, 0]).insert_into(
    #         "accounts"
    #     )
    # )
    # print(rel)

    # con.table("accounts")
    # arrow_table = pa.Table.from_pydict(
    #     {"address": [1, 2, 3, 4], "j": ["one", "two", "three", "four"]}
    # )
    # my_dictionary = {}
    # my_dictionary["accounts"] = pd.DataFrame.from_dict(
    #     {"i": [1, 2, 3, 4], "j": ["one", "two", "three", "four"]}
    # )
    # con.register("test_df_view", my_dictionary["test_df"])
    # con.execute("SELECT * FROM test_df_view")
    # print(con.fetchall())

    # address = uuid.uuid4().hex[10:]
    # account = Account(address, 100)
    # fed = FederatedStorage()
    # fed.add_account(account)
    # logger.info(fed.get_account(address))


if __name__ == "__main__":
    main()
